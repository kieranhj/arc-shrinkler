Shrinkler Decompressor.
Acorn Archimedes ARM port.
~~~
1. Make it correct.
2. Make it fast. :)

TODO:
~~~
- Look at 68K implementation for ideas on how to optimise. - DONE
- Remove need to look up every single byte. - DONE w/ bit_buffer.
- Reduce register pressure. - DONE
- Inline funtions. - DONE
- Proper Makefile. - DONE
- Implement callback fn. - DONE
- Make it a Relocatable Module?
- Add proper command-line option to Shrinkler.exe for endian swap word output. - DONE
- Test with a wider range of data files! - ISH.
- Add verification of output to test harness. -ISH
- Handle Shrinkler header? - DONE
- Documentation. - DONE
- Contact Blueberry. - DONE

Size
~~
Currently 380 bytes = 95 words without _DEBUG.
stniccc/scene1.bin goes wrong after 0x4c8 bytes written. - FIXED!

Header
~~~
struct DataHeader {
	char magic[4];
	char major_version;
	char minor_version;
	Word header_size;
	Longword compressed_size;
	Longword uncompressed_size;
	Longword safety_margin;
	Longword flags;
};

4 byte parity context
~~~
Assume this would give better compression ratios for pure ARM code that has fixed
32-bit instruction size.

Limited testing seems to prove this case.
E.g. QTMModule is 63064 bytes raw.
Parity 0 (byte data) compresses to 13053 bytes (~20.7%)
Parity 4 (32-bit word data) compresses to 12799 bytes (~20.3%)

Probably only worth continuing further and implementing the decompressor if those
last few bytes are really needed for a future 4K/64K demo.

(Standard text data and the STNICCC data set come out larger, as expected.)
